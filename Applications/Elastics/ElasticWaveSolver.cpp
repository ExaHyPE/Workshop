// This file was generated by the ExaHyPE toolkit.
// It will NOT be regenerated or overwritten.
// Please adapt it to your own needs.
// 
// ========================
//   www.exahype.eu
// ========================

#include "ElasticWaveSolver.h"

#include "ElasticWaveSolver_Variables.h"

#include "kernels/KernelUtils.h"
#include "peano/utils/Loop.h"

tarch::logging::Log Linear::ElasticWaveSolver::_log( "Linear::ElasticWaveSolver" );


void Linear::ElasticWaveSolver::init(const std::vector<std::string>& cmdlineargs,const exahype::parser::ParserView& constants) {
  initPointSourceLocations(cmdlineargs,constants);	
}

void Linear::ElasticWaveSolver::adjustPointSolution(const double* const x,const double t,const double dt,double* const Q) {
  VariableShortcuts s;
  if (tarch::la::equals(t,0.0)) {
    //Task 2 & Task 3: Set initial conditions 
    Q[s.v + 0]     = 0.0;
    Q[s.v + 1]     = 0.0;
    Q[s.sigma + 0] = 0.0;
    Q[s.sigma + 1] = 0.0;
    Q[s.sigma + 2] = 0.0;
    Q[s.rho]       = 0.0;
    Q[s.cp]        = 0.0;
    Q[s.cs]        = 0.0;
  }
}

void Linear::ElasticWaveSolver::boundaryValues(const double* const x,const double t,const double dt,const int faceIndex,const int direction,const double* const fluxIn,const double* const stateIn,const double* const gradStateIn,double* const fluxOut,double* const stateOut) {
  
  int normal_velocity, tangent_velocity;
  int normal_traction, tangent_traction;
  VariableShortcuts s;

  //abc
  stateOut[0] = 0;
  stateOut[1] = 0;
  stateOut[2] = 0;
  stateOut[3] = 0;
  stateOut[4] = 0;
  stateOut[5] = stateIn[5];
  stateOut[6] = stateIn[6];
  stateOut[7] = stateIn[7];
  
  fluxOut[0] = 0.0;
  fluxOut[1] = 0.0;
  fluxOut[2] = 0.0;
  fluxOut[3] = 0.0;
  fluxOut[4] = 0.0;


  //Task 3: Implement free surface boundary condition
  
}

exahype::solvers::Solver::RefinementControl Linear::ElasticWaveSolver::refinementCriterion(const double* const luh,const tarch::la::Vector<DIMENSIONS,double>& cellCentre,const tarch::la::Vector<DIMENSIONS,double>& cellSize,double t,const int level) {
  
  return exahype::solvers::Solver::RefinementControl::Keep;
  
}

//*****************************************************************************
//******************************** PDE ****************************************
// To use other PDE terms, specify them in the specification file, delete this 
// file and its header and rerun the toolkit
//*****************************************************************************


void Linear::ElasticWaveSolver::eigenvalues(const double* const Q,const int direction,double* const lambda) {
  VariableShortcuts s;

  //Task 2: Set eigenvalues
  lambda[0] =  0.0;
  lambda[1] =  0.0;
  lambda[2] =  0.0; 
  lambda[3] =  0.0;
  lambda[4] =  0.0;
}



void Linear::ElasticWaveSolver::flux(const double* const Q,double** const F) {

  VariableShortcuts s;

  //Task 2: Implement flux function
  F[0][0] = 0.0;
  F[0][1] = 0.0;
  F[0][2] = 0.0;
  F[0][3] = 0.0;
  F[0][4] = 0.0;
  
  F[1][0] = 0.0;
  F[1][1] = 0.0;
  F[1][2] = 0.0;
  F[1][3] = 0.0;
  F[1][4] = 0.0;
}


void  Linear::ElasticWaveSolver::initPointSourceLocations(const std::vector<std::string>& cmdlineargs,const exahype::parser::ParserView& constants){
  
  //Task 3: Set point source location
  pointSourceLocation[0][0] = 0.0;
  pointSourceLocation[0][1] = 0.0;
}

void  Linear::ElasticWaveSolver::pointSource(const double* const Q,const double* const x,const double t,const double dt, double* const forceVector, int n) {

  VariableShortcuts s;
  //Task 3 Set point source force vector
  forceVector[0] = 0.0;
  forceVector[1] = 0.0;
  forceVector[2] = 0.0;
  forceVector[3] = 0.0;
  forceVector[4] = 0.0;
}
